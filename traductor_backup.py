from tqdm import tqdm
import xml.etree.ElementTree as ET
import os
import html
from openai import OpenAI
import json

# Configura l'API (DeepSeek via endpoint compatible amb OpenAI)
os.environ["OPENAI_API_KEY"] = "sk-5a41a61c2f7b4153bb7f7be2c6dd2c88"
client = OpenAI(base_url="https://api.deepseek.com")
MODEL_NAME = "deepseek-chat"
MIDA_BLOC = 50

def neteja_entrada(text: str) -> str:
    text = html.escape(text)
    text = text.replace("'", "‚Äô")
    return text

def restaura_sortida(text: str) -> str:
    text = html.unescape(text)
    return text.replace("‚Äô", "'")

def tradueix_bloc_de_l√≠nies(llista_frases: list[str]) -> list[str]:
    prompt_json = {
        "texts": [neteja_entrada(frase) for frase in llista_frases]
    }

    try:
        resposta = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Ets un traductor professional del castell√† al catal√†. "
                        "Rebr√†s un objecte JSON amb una llista de frases sota la clau 'texts'. "
                        "Tradu√Øx cada element del camp 'texts' i retorna un JSON amb la clau 'translations'. "
                        "El nombre d'elements tradu√Øts ha de coincidir exactament amb l'original. "
                        "NO afegeixis explicacions."
                        "Instruccions especials:"
                        "Tradueix 'Coraz√≥n Sombrio' per 'Cor tenebr√≥s', 'garracuerno' per 'Garracorna', 'azotamentes' per 'flagell de ments', 'risa' per 'rialla', 'menton√°culo' per 'mentonacle', "
                        "'a salvo' per 'fora de perill', 'Tarareo' per 'taral¬∑leig', 'escueta' per 'concisa', 'en cuanto' per 'tant bon punt', 'amanezca' per 'surti el sol', 'ojo avizor' per 'ull viu'"
                        "'cambion' per 'met√†morf', 'juguetes' per 'juguines', 'Ojal√°' per 'Tant de bo', 'impia' per 'impietosa', 'engendro' per 'abominaci√≥', 'ladrones' per 'lladres', 'sedienta' per 'assedegada'"
                        "'siervo' per 'vassall', 'podrida' per 'p√∫drida', 'labia' per 'eloq√º√®ncia', 'cabeza hueca' per 'cap de suro', 'mente colmena' per 'ment enlla√ßada', 'nauseabunda' per 'repugnant'"
                        "'frasco' per 'flasc√≥', 'conseguido' per 'aconseguit', 'diablillo' per 'dimoniet'', 'Jarro' per 'Gerra', 'piel robliza' per 'pell de roure', 'c√°liz' per 'c√†liz', 'compa√±eros' per 'companys'"
                        "'trampilla' per 'trapa', 'p√≥cima' per 'p√≤cima', 'jamas pense' per 'mai hauria pensat', 'al acecho' per 'a la guait', 'picaro' per 'brivall', 'salpicadura' per 'esquitx', 'pillan' per 'atrapen'"
                        "'me las piro' per 'foto el camp', 'empujoncito' per 'empenteta', 'bicho' per 'bestiola', 'hacha' per 'destral', 'te diviertes' per 'et diverteixes', 'pandilla' per 'colla', 'pilla' per 'agafa'"
                        "'lenyador' per 'llenyataire','sabe a' per 'te gust a ', 'hinchado' per 'inflat', 'conozco' per 'conec', 'pesadilla' per 'malson', 'acometida' per 'escomesa', 'ta√±ido' per 'repic', 'enano' per 'nan'"
                        "'yelmo' per 'elm', 'rindete' per 'rendeix-te', 'estupendo' per 'fant√†stic', 'ah√≠nco' per 'afany', 'pastizal' per 'dineral', 'merecido' per 'merescut', 'manos a la obra' per 'anem per feina'"
                        "'usa' per 'utilitza', 'colinas' per 'turons', 'sendero' per 'cam√≠', 'date prisa' per 'afanya't', 'se cuelan' per 's'escolen', 'macheta' per 'ganivet gros', 'en un santiamen' per 'en un instant'"
                        "'Lunar' per 'de la Lluna', 'pretendes' per 'pretens', 'bicho' per 'bestiola'"
                        "Si detectes que una paraula com 'cielo' s'utilitza com a mot cariny√≥s, tradueix-la com 'rei' o 'carinyo', segons convingui. Si √©s literal, fes servir 'cel'."
                        "Quan es parli en el text original de 'saga' com a sinonim de 'bruja' tradueix-lo per 'bruixa'"
                        #"Respecta escrupolosament el g√®nere no binari de l'original. Si el text font usa recursos no binaries (com '-e', '-en'),"
                        #" adapta'l al catal√† amb la mateixa convenci√≥, prioritzant la intenci√≥ dels creadors sobre la normativa est√†ndard"
                    )
                },
                {
                    "role": "user",
                    "content": json.dumps(prompt_json, ensure_ascii=False)
                }
            ],
            temperature=0.5,
        )

        text_tradu√Øt = resposta.choices[0].message.content.strip()

        # Elimina cap√ßaleres Markdown o restes decoratives
        l√≠nies = text_tradu√Øt.strip().splitlines()
        if l√≠nies and l√≠nies[0].strip().lower() in ("json", "```json"):
            l√≠nies = l√≠nies[1:]  # elimina la primera l√≠nia
            if l√≠nies and l√≠nies[-1].strip() == "```":
                l√≠nies = l√≠nies[:-1]  # elimina l'√∫ltima l√≠nia si √©s el tancament del bloc
            text_tradu√Øt = "".join(l√≠nies).strip()

        linies_tradu√Ødes = ["" for _ in llista_frases]
        try:
            traduccions_json = json.loads(text_tradu√Øt)
            tradu√Ødes = traduccions_json.get("translations", [])
            for i, frase in enumerate(tradu√Ødes):
                if i < len(linies_tradu√Ødes):
                    linies_tradu√Ødes[i] = restaura_sortida(frase.strip())
        except Exception as e:
            print(f"‚ùå Error interpretant la resposta JSON del model: {e}")
            print("üì• Resposta rebuda del model (bruta):")
            print(repr(text_tradu√Øt))

        for i, traduccio in enumerate(linies_tradu√Ødes):
            if not traduccio.strip():
                frase_original = llista_frases[i]
                try:
                    resposta_retry = client.chat.completions.create(
                        model=MODEL_NAME,
                        messages=[
                            {
                                "role": "system",
                                "content": (
                                    "Ets un traductor professional del castell√† al catal√†. "
                                    "Tradueix la frase seg√ºent, conservant qualsevol etiqueta XML o car√†cters especials. "
                                    "NO afegeixis cap comentari ni explicaci√≥."
                                )
                            },
                            {
                                "role": "user",
                                "content": neteja_entrada(frase_original)
                            }
                        ],
                        temperature=0.5,
                    )
                    retry_result = resposta_retry.choices[0].message.content.strip()
                    if retry_result:
                        linies_tradu√Ødes[i] = restaura_sortida(retry_result)
                        print(f"üîÅ L√≠nia {i+1} re-tradu√Øda correctament.")
                    else:
                        linies_tradu√Ødes[i] = frase_original
                        print(f"‚ö†Ô∏è L√≠nia {i+1} no tradu√Øda. Frase original mantinguda:\n> {frase_original}")
                except Exception as e:
                    print(f"‚ùå Error al reintentar la l√≠nia {i+1}: {e}")
                    linies_tradu√Ødes[i] = frase_original
                    print(f"‚ö†Ô∏è L√≠nia {i+1} mantinguda original per error:\n> {frase_original}")

        return linies_tradu√Ødes

    except Exception as e:
        print(f"‚ö†Ô∏è Error en traduir el bloc: {e}")
        return []

def processa_fitxer_xml(nom_fitxer, num_linia_inicial):
    try:
        arbre = ET.parse(nom_fitxer)
        arrel = arbre.getroot()
        nom_fitxer_nou = nom_fitxer.replace('.xml', '_CAT.xml')
        log_path = nom_fitxer.replace('.xml', '_traduccio.log')
        log = open(log_path, 'w', encoding='utf-8')

        if os.path.exists(nom_fitxer_nou):
            arbre_nou = ET.parse(nom_fitxer_nou)
            arrel_nou = arbre_nou.getroot()
        else:
            arrel_nou = ET.Element(arrel.tag)

        elements = list(arrel.iter('content'))
        print(f"üìä L√≠nies originals: {len(elements)}")
        total = len(elements)
        comptador = 0

        while comptador < total:
            if comptador < num_linia_inicial:
                comptador += 1
                continue

            bloc_actual = []
            elements_bloc = []
            i = 0
            while comptador + i < total and len(bloc_actual) < MIDA_BLOC:
                element = elements[comptador + i]
                if element.text and element.text.strip():
                    bloc_actual.append(element.text.strip())
                    elements_bloc.append(element)
                i += 1

            if not bloc_actual:
                comptador += i
                continue

            log.write(f"\nüîπ Bloc comen√ßat a l√≠nia {comptador} ({len(bloc_actual)} frases):\n")
            traduccions = tradueix_bloc_de_l√≠nies(bloc_actual)

            if not traduccions or len(traduccions) != len(bloc_actual):
                log.write(f"‚ùå Bloc descartat: {len(traduccions)} traduccions rebudes.\n")
                comptador += i
                continue

            linies_buides = sum(1 for t in traduccions if not t.strip())
            log.write(f"‚úÖ Bloc acceptat. L√≠nies buides: {linies_buides}\n")
            if len(traduccions) != len(bloc_actual):
                print(f"‚ùå Bloc comen√ßat a l√≠nia {comptador}: {len(bloc_actual)} originals vs {len(traduccions)} tradu√Ødes")
            else:
                print(f"‚úÖ Bloc comen√ßat a l√≠nia {comptador}: {len(bloc_actual)} frases tradu√Ødes correctament")

            for idx, (elem_original, text_tradu√Øt) in enumerate(zip(elements_bloc, traduccions)):
                if not text_tradu√Øt.strip():
                    log.write(f"  ‚ö†Ô∏è L√≠nia {idx + 1} buida. S'afegeix la frase original.\n")
                    text_tradu√Øt = elem_original.text.strip()

                nou_elem = ET.SubElement(arrel_nou, elem_original.tag)
                nou_elem.text = text_tradu√Øt
                for atribut, valor in elem_original.attrib.items():
                    nou_elem.set(atribut, valor)

            comptador += i

            xml_str = ET.tostring(arrel_nou, encoding='unicode')
            xml_str = xml_str.replace('</content>', '</content>\n')
            with open(nom_fitxer_nou, 'w', encoding='utf-8') as f:
                f.write('<?xml version="1.0" encoding="utf-8"?>\n')
                f.write(xml_str)

        log.close()
        print(f"‚úÖ Fitxer completament tradu√Øt i desat com: {nom_fitxer_nou}")
        print(f"üìÑ Log de la traducci√≥ desat com: {log_path}")

        elements_traduits = list(arrel_nou.iter('content'))
        print(f"üìä L√≠nies tradu√Ødes: {len(elements_traduits)}")

        if len(elements_traduits) == len(elements):
            print("‚úÖ Nombre de l√≠nies coincident entre l'original i el fitxer tradu√Øt.")
        else:
            print("‚ùå Atenci√≥: el nombre de l√≠nies tradu√Ødes no coincideix amb l'original!")
            print(f"‚û°Ô∏è Difer√®ncia: {len(elements)} originals vs {len(elements_traduits)} tradu√Ødes")

    except Exception as e:
        print(f"‚ùå Error en processar el fitxer XML: {e}")

def actualitza_fitxer_tradu√Øt(nom_fitxer_original, nom_fitxer_tradu√Øt):
    try:
        arbre_original = ET.parse(nom_fitxer_original)
        arrel_original = arbre_original.getroot()
        elements_originals = list(arrel_original.iter('content'))

        if os.path.exists(nom_fitxer_tradu√Øt):
            arbre_tradu√Øt = ET.parse(nom_fitxer_tradu√Øt)
            arrel_tradu√Øt = arbre_tradu√Øt.getroot()
            contentuids_existents = {
                elem.attrib.get('contentuid'): elem.text.strip()
                for elem in arrel_tradu√Øt.iter('content')
                if elem.attrib.get('contentuid') and elem.text
            }
        else:
            arrel_tradu√Øt = ET.Element(arrel_original.tag)
            contentuids_existents = {}

        nous_elements = []
        nous_textos = []
        for elem in elements_originals:
            contentuid = elem.attrib.get('contentuid')
            text = elem.text.strip() if elem.text else ''
            if contentuid and contentuid not in contentuids_existents and text:
                nous_elements.append(elem)
                nous_textos.append(text)

        print(f"üîç S'han detectat {len(nous_textos)} noves l√≠nies per traduir.")

        bloc_inici = 0
        while bloc_inici < len(nous_textos):
            bloc = nous_textos[bloc_inici:bloc_inici + MIDA_BLOC]
            elements_bloc = nous_elements[bloc_inici:bloc_inici + MIDA_BLOC]

            traduccions = tradueix_bloc_de_l√≠nies(bloc)
            if len(traduccions) != len(bloc):
                print(f"‚ö†Ô∏è Error de mida al bloc {bloc_inici}. Traduccions descartades.")
                bloc_inici += MIDA_BLOC
                continue

            for original, text_tradu√Øt in zip(elements_bloc, traduccions):
                nou_elem = ET.SubElement(arrel_tradu√Øt, original.tag)
                nou_elem.text = text_tradu√Øt
                for atribut, valor in original.attrib.items():
                    nou_elem.set(atribut, valor)

            bloc_inici += MIDA_BLOC

        xml_str = ET.tostring(arrel_tradu√Øt, encoding='unicode')
        xml_str = xml_str.replace('</content>', '</content>\n')
        with open(nom_fitxer_tradu√Øt, 'w', encoding='utf-8') as f:
            f.write('<?xml version="1.0" encoding="utf-8"?>\n')
            f.write(xml_str)

        print(f"‚úÖ Traducci√≥ actualitzada i desada com: {nom_fitxer_tradu√Øt}")
        print(f"üìä L√≠nies noves tradu√Ødes: {len(nous_textos)}")

    except Exception as e:
        print(f"‚ùå Error en actualitzar el fitxer de traducci√≥: {e}")


# Exemple d'√∫s
nom_fitxer_original = 'D:\\Repositori\\Traductor-Baldur-s-Gate-3\\descodificats\\Localization\\Spanish\\Gender\\Neutral\\spanish_X_to_M.xml'
num_linia_inicial = 0
#processa_fitxer_xml(nom_fitxer_original, num_linia_inicial)
nom_fitxer_tradu√Øt = nom_fitxer_original.replace('.xml', '_CAT.xml')
actualitza_fitxer_tradu√Øt(nom_fitxer_original, nom_fitxer_tradu√Øt)
